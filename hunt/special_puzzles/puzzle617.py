# See silenda/spoilr/puzzle_session.py
# Error Messages: <div id="puzzle-session-error-message-container"></div>
# <script src="/static/puzzle_session.js"></script>
# var session = new PuzzleSession("URL");
# session.json_request(JSON_PAYLOAD, function(res) {});

from django.core.exceptions import ValidationError
from django.db import models
from django.core.validators import int_list_validator
from django import forms
from spoilr.models import Team, transaction
from spoilr.puzzle_session import *
from typing import Optional, List, Tuple
import operator
import codecs
import itertools
import string
import base64
import json
import time


from hunt.teamwork import TeamworkTimeConsumer

Diff = Tuple[int,int,bool,int] # x,y,add/del,type
State = List[int]

def serialize(l: State) -> bytes:
    return bytes(l)

def deserialize(b: bytes) -> State:
    return list(b)

def serializeDiffs(ds: List[Diff]) -> bytes:
    x = []
    for d in ds:
        x.extend((d[0], d[1], int(d[2]), d[3]))
    return bytes(x)

def deserializeDiffs(b: bytes) -> List[Diff]:
    if b == b'':
        return []
    x = list(b)
    d = []
    assert len(x) % 4 == 0
    for i in range(0,len(x),4):
        d.append( (x[i], x[i+1], bool(x[i+2]), x[i+3]) )
    return d

def modify_game_state(state: State, player_id: int, direction: str):
    # direction = NEWS
    # player_id = 1234
    new_state = state
    diff: List[Diff] = []
    won = False
    return new_state, diff, won

def hash_state(state: State):
    MODULUS = 1073741789
    BIG_MODULUS = 2147483647
    S = 348976
    for i in range(2, len(state), 3):
        x = state[i]
        y = state[i+1]
        t = state[i+2]
        S += pow(17445*x**8 + 2021*t**2, 43*y + 84, MODULUS)
        S %= MODULUS
    return pow(65537, S, BIG_MODULUS)

def get_default_state(game_id: int) -> State:
    if game_id == 1:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 186, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 11, 100, 1, 12, 251, 1, 23, 60,
        1, 24, 251, 2, 0, 251, 2, 8, 156, 2, 11, 104, 2, 12, 251, 2, 23, 104,
        2, 24, 251, 3, 0, 251, 3, 11, 115, 3, 12, 251, 3, 23, 149, 3, 24, 251,
        4, 0, 251, 4, 12, 251, 4, 20, 211, 4, 24, 251, 5, 0, 251, 5, 5, 229,
        5, 12, 251, 5, 24, 251, 6, 0, 251, 6, 4, 229, 6, 5, 186, 6, 6, 229, 6,
        12, 251, 6, 16, 101, 6, 24, 251, 7, 0, 251, 7, 5, 229, 7, 12, 251, 7,
        15, 59, 7, 16, 104, 7, 17, 150, 7, 24, 251, 8, 0, 251, 8, 12, 251, 8,
        16, 148, 8, 20, 186, 8, 24, 251, 9, 0, 251, 9, 12, 251, 9, 24, 251,
        10, 0, 251, 10, 12, 251, 10, 24, 251, 11, 0, 251, 11, 12, 251, 11, 24,
        251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12, 3, 251, 12, 4, 251, 12,
        5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251, 12, 9, 251, 12, 10, 251,
        12, 11, 251, 12, 12, 251, 12, 13, 251, 12, 14, 251, 12, 15, 251, 12,
        16, 251, 12, 17, 251, 12, 18, 251, 12, 19, 251, 12, 20, 251, 12, 21,
        251, 12, 22, 251, 12, 23, 251, 12, 24, 251, 13, 0, 251, 13, 12, 251,
        13, 24, 251, 14, 0, 251, 14, 8, 123, 14, 12, 251, 14, 16, 5, 14, 24,
        251, 15, 0, 251, 15, 3, 252, 15, 7, 78, 15, 8, 104, 15, 9, 115, 15,
        12, 251, 15, 15, 78, 15, 16, 104, 15, 17, 124, 15, 24, 251, 16, 0,
        251, 16, 8, 35, 16, 12, 251, 16, 16, 114, 16, 24, 251, 17, 0, 251, 17,
        12, 251, 17, 24, 251, 18, 0, 251, 18, 12, 251, 18, 19, 210, 18, 24,
        251, 19, 0, 251, 19, 12, 251, 19, 24, 251, 20, 0, 251, 20, 12, 251,
        20, 24, 251, 21, 0, 251, 21, 12, 251, 21, 24, 251, 22, 0, 251, 22, 12,
        251, 22, 24, 251, 23, 0, 251, 23, 12, 251, 23, 24, 251, 24, 0, 251,
        24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4, 251, 24, 5, 251, 24, 6,
        251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24, 10, 251, 24, 11, 251, 24,
        12, 251, 24, 13, 251, 24, 14, 251, 24, 15, 251, 24, 16, 251, 24, 17,
        251, 24, 18, 251, 24, 19, 251, 24, 20, 251, 24, 21, 251, 24, 22, 251,
        24, 23, 251, 24, 24, 186]

    elif game_id == 2:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 12, 251, 1, 23, 100, 1, 24, 251,
        2, 0, 251, 2, 1, 5, 2, 12, 251, 2, 23, 104, 2, 24, 251, 3, 0, 251, 3,
        1, 104, 3, 6, 156, 3, 12, 251, 3, 18, 163, 3, 23, 115, 3, 24, 251, 4,
        0, 251, 4, 1, 114, 4, 12, 251, 4, 13, 12, 4, 24, 251, 5, 0, 251, 5,
        12, 251, 5, 13, 104, 5, 15, 210, 5, 17, 210, 5, 19, 210, 5, 21, 210,
        5, 24, 251, 6, 0, 251, 6, 12, 251, 6, 13, 149, 6, 24, 251, 7, 0, 251,
        7, 12, 251, 7, 17, 59, 7, 18, 104, 7, 19, 124, 7, 24, 251, 8, 0, 251,
        8, 12, 251, 8, 24, 251, 9, 0, 251, 9, 11, 229, 9, 12, 251, 9, 24, 251,
        10, 0, 251, 10, 10, 229, 10, 11, 210, 10, 12, 251, 10, 24, 251, 11, 0,
        251, 11, 9, 229, 11, 10, 210, 11, 11, 186, 11, 12, 251, 11, 24, 251,
        12, 0, 251, 12, 1, 251, 12, 2, 251, 12, 3, 251, 12, 4, 251, 12, 5,
        251, 12, 6, 251, 12, 7, 251, 12, 8, 251, 12, 9, 251, 12, 10, 251, 12,
        11, 251, 12, 12, 251, 12, 13, 251, 12, 14, 251, 12, 15, 251, 12, 16,
        251, 12, 17, 251, 12, 18, 251, 12, 19, 251, 12, 20, 251, 12, 21, 251,
        12, 22, 251, 12, 23, 251, 12, 24, 186, 13, 0, 251, 13, 12, 251, 13,
        24, 251, 14, 0, 251, 14, 12, 251, 14, 14, 186, 14, 24, 251, 15, 0,
        251, 15, 12, 251, 15, 14, 104, 15, 24, 251, 16, 0, 251, 16, 4, 35, 16,
        12, 251, 16, 13, 78, 16, 15, 150, 16, 18, 229, 16, 24, 251, 17, 0,
        251, 17, 4, 104, 17, 7, 186, 17, 12, 251, 17, 13, 104, 17, 24, 251,
        18, 0, 251, 18, 4, 148, 18, 12, 251, 18, 13, 115, 18, 24, 251, 19, 0,
        251, 19, 9, 123, 19, 12, 251, 19, 24, 251, 20, 0, 251, 20, 12, 251,
        20, 24, 251, 21, 0, 251, 21, 12, 251, 21, 24, 251, 22, 0, 251, 22, 12,
        251, 22, 24, 251, 23, 0, 251, 23, 12, 251, 23, 24, 251, 24, 0, 186,
        24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4, 251, 24, 5, 251, 24, 6,
        251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24, 10, 251, 24, 11, 251, 24,
        12, 251, 24, 13, 251, 24, 14, 251, 24, 15, 251, 24, 16, 251, 24, 17,
        251, 24, 18, 251, 24, 19, 251, 24, 20, 251, 24, 21, 251, 24, 22, 251,
        24, 23, 251, 24, 24, 251]

    elif game_id == 3:
        return \
        [25, 25, 0, 0, 186, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 12, 251, 1, 24, 251, 2, 0, 251,
        2, 3, 65, 2, 4, 104, 2, 5, 114, 2, 10, 251, 2, 11, 251, 2, 12, 251, 2,
        19, 102, 2, 24, 251, 3, 0, 251, 3, 10, 50, 3, 11, 251, 3, 12, 251, 3,
        15, 253, 3, 18, 5, 3, 19, 104, 3, 20, 128, 3, 24, 251, 4, 0, 251, 4,
        3, 216, 4, 5, 216, 4, 7, 216, 4, 12, 251, 4, 19, 149, 4, 24, 251, 5,
        0, 251, 5, 10, 126, 5, 11, 251, 5, 12, 251, 5, 24, 251, 6, 0, 251, 6,
        10, 251, 6, 11, 251, 6, 12, 251, 6, 24, 251, 7, 0, 251, 7, 1, 210, 7,
        2, 210, 7, 3, 210, 7, 4, 210, 7, 5, 210, 7, 6, 210, 7, 7, 210, 7, 8,
        210, 7, 9, 210, 7, 10, 210, 7, 11, 210, 7, 12, 251, 7, 24, 251, 8, 0,
        251, 8, 8, 251, 8, 9, 251, 8, 10, 251, 8, 11, 251, 8, 12, 251, 8, 13,
        229, 8, 14, 229, 8, 15, 229, 8, 16, 229, 8, 17, 229, 8, 18, 229, 8,
        19, 229, 8, 20, 229, 8, 21, 229, 8, 22, 229, 8, 23, 229, 8, 24, 251,
        9, 0, 251, 9, 1, 35, 9, 2, 104, 9, 3, 114, 9, 8, 101, 9, 10, 59, 9,
        11, 78, 9, 12, 251, 9, 18, 28, 9, 24, 251, 10, 0, 251, 10, 1, 251, 10,
        2, 251, 10, 3, 251, 10, 4, 251, 10, 8, 104, 10, 9, 104, 10, 10, 104,
        10, 11, 104, 10, 12, 251, 10, 18, 104, 10, 24, 251, 11, 0, 251, 11, 1,
        186, 11, 2, 176, 11, 3, 248, 11, 4, 179, 11, 5, 179, 11, 8, 115, 11,
        9, 124, 11, 10, 124, 11, 11, 124, 11, 12, 251, 11, 16, 100, 11, 17,
        104, 11, 18, 115, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12,
        3, 251, 12, 4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251,
        12, 9, 251, 12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12,
        14, 251, 12, 15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19,
        251, 12, 20, 251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 186,
        13, 0, 251, 13, 12, 251, 13, 13, 65, 13, 14, 104, 13, 16, 252, 13, 24,
        251, 14, 0, 251, 14, 12, 251, 14, 13, 10, 14, 14, 104, 14, 15, 150,
        14, 16, 252, 14, 24, 251, 15, 0, 251, 15, 1, 201, 15, 2, 201, 15, 12,
        251, 15, 15, 123, 15, 16, 252, 15, 20, 161, 15, 24, 251, 16, 0, 251,
        16, 2, 97, 16, 4, 176, 16, 7, 25, 16, 12, 251, 16, 16, 252, 16, 24,
        251, 17, 0, 251, 17, 2, 104, 17, 7, 104, 17, 10, 251, 17, 11, 251, 17,
        12, 251, 17, 16, 252, 17, 24, 251, 18, 0, 251, 18, 2, 148, 18, 7, 124,
        18, 10, 104, 18, 11, 129, 18, 12, 251, 18, 16, 252, 18, 20, 101, 18,
        24, 251, 19, 0, 251, 19, 1, 201, 19, 2, 201, 19, 5, 248, 19, 10, 251,
        19, 11, 251, 19, 12, 251, 19, 16, 252, 19, 20, 104, 19, 24, 251, 20,
        0, 251, 20, 12, 251, 20, 16, 252, 20, 20, 125, 20, 24, 251, 21, 0,
        251, 21, 11, 50, 21, 12, 251, 21, 16, 252, 21, 24, 251, 22, 0, 251,
        22, 11, 104, 22, 12, 251, 22, 16, 252, 22, 23, 127, 22, 24, 251, 23,
        0, 251, 23, 11, 115, 23, 12, 251, 23, 16, 252, 23, 20, 251, 23, 21,
        50, 23, 22, 104, 23, 24, 251, 24, 0, 251, 24, 1, 251, 24, 2, 251, 24,
        3, 251, 24, 4, 251, 24, 5, 251, 24, 6, 251, 24, 7, 251, 24, 8, 251,
        24, 9, 251, 24, 10, 251, 24, 11, 251, 24, 12, 251, 24, 13, 251, 24,
        14, 251, 24, 15, 251, 24, 16, 251, 24, 17, 251, 24, 18, 251, 24, 19,
        251, 24, 20, 251, 24, 21, 251, 24, 22, 251, 24, 23, 251, 24, 24, 251]

    elif game_id == 4:
        return \
        [25, 25, 0, 0, 186, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 186, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 1, 29, 1, 2, 5, 1, 12, 251, 1,
        24, 251, 2, 0, 251, 2, 1, 104, 2, 2, 104, 2, 4, 156, 2, 12, 251, 2,
        13, 55, 2, 24, 251, 3, 0, 251, 3, 1, 124, 3, 2, 114, 3, 12, 251, 3,
        13, 104, 3, 24, 251, 4, 0, 251, 4, 12, 251, 4, 13, 150, 4, 24, 251, 5,
        0, 251, 5, 12, 251, 5, 16, 194, 5, 24, 251, 6, 0, 180, 6, 12, 180, 6,
        24, 251, 7, 0, 251, 7, 12, 251, 7, 24, 251, 8, 0, 251, 8, 12, 251, 8,
        24, 251, 9, 0, 251, 9, 12, 251, 9, 24, 251, 10, 0, 251, 10, 1, 179,
        10, 2, 179, 10, 9, 35, 10, 11, 123, 10, 12, 251, 10, 24, 251, 11, 0,
        251, 11, 1, 186, 11, 2, 179, 11, 9, 28, 11, 10, 104, 11, 11, 128, 11,
        12, 251, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12, 3, 251,
        12, 4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251, 12, 9,
        251, 12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12, 14, 251,
        12, 15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19, 251, 12,
        20, 251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 251, 13, 0,
        251, 13, 1, 34, 13, 12, 251, 13, 23, 100, 13, 24, 251, 14, 0, 251, 14,
        1, 104, 14, 12, 251, 14, 23, 104, 14, 24, 251, 15, 0, 251, 15, 1, 148,
        15, 12, 251, 15, 23, 115, 15, 24, 251, 16, 0, 251, 16, 12, 251, 16,
        18, 206, 16, 24, 251, 17, 0, 251, 17, 5, 28, 17, 12, 251, 17, 24, 251,
        18, 0, 180, 18, 12, 180, 18, 24, 251, 19, 0, 251, 19, 12, 251, 19, 19,
        129, 19, 24, 251, 20, 0, 251, 20, 4, 185, 20, 12, 251, 20, 13, 43, 20,
        24, 251, 21, 0, 251, 21, 12, 251, 21, 13, 104, 21, 24, 251, 22, 0,
        251, 22, 12, 251, 22, 13, 149, 22, 24, 251, 23, 0, 251, 23, 12, 251,
        23, 24, 251, 24, 0, 251, 24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4,
        251, 24, 5, 251, 24, 6, 251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24,
        10, 251, 24, 11, 251, 24, 12, 251, 24, 13, 251, 24, 14, 251, 24, 15,
        251, 24, 16, 251, 24, 17, 251, 24, 18, 251, 24, 19, 251, 24, 20, 251,
        24, 21, 251, 24, 22, 251, 24, 23, 251, 24, 24, 251]

    elif game_id == 5:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 186, 1, 0, 251, 1, 1, 69, 1, 2, 92, 1, 3, 69, 1,
        12, 251, 1, 13, 55, 1, 24, 251, 2, 0, 251, 2, 1, 104, 2, 2, 104, 2, 3,
        104, 2, 5, 220, 2, 12, 251, 2, 13, 104, 2, 24, 251, 3, 0, 251, 3, 1,
        114, 3, 2, 130, 3, 3, 130, 3, 5, 207, 3, 12, 251, 3, 13, 149, 3, 24,
        251, 4, 0, 251, 4, 12, 251, 4, 16, 206, 4, 18, 101, 4, 19, 104, 4, 20,
        126, 4, 24, 251, 5, 0, 251, 5, 5, 183, 5, 6, 183, 5, 7, 183, 5, 8,
        183, 5, 9, 183, 5, 10, 183, 5, 11, 183, 5, 12, 251, 5, 16, 252, 5, 18,
        56, 5, 24, 251, 6, 0, 180, 6, 5, 183, 6, 6, 252, 6, 7, 252, 6, 8, 252,
        6, 9, 252, 6, 10, 252, 6, 11, 252, 6, 12, 180, 6, 24, 180, 7, 0, 251,
        7, 5, 183, 7, 6, 252, 7, 7, 183, 7, 8, 183, 7, 9, 183, 7, 10, 183, 7,
        11, 183, 7, 12, 251, 7, 24, 251, 8, 0, 251, 8, 5, 183, 8, 6, 252, 8,
        7, 183, 8, 8, 179, 8, 9, 179, 8, 10, 179, 8, 11, 179, 8, 12, 251, 8,
        13, 179, 8, 14, 179, 8, 15, 179, 8, 16, 179, 8, 20, 183, 8, 21, 183,
        8, 22, 183, 8, 23, 183, 8, 24, 251, 9, 0, 251, 9, 1, 32, 9, 5, 183, 9,
        6, 252, 9, 7, 183, 9, 8, 179, 9, 9, 104, 9, 12, 251, 9, 15, 207, 9,
        16, 179, 9, 20, 183, 9, 21, 104, 9, 23, 29, 9, 24, 251, 10, 0, 251,
        10, 1, 104, 10, 5, 183, 10, 6, 252, 10, 7, 183, 10, 8, 179, 10, 10,
        123, 10, 12, 251, 10, 14, 32, 10, 16, 179, 10, 20, 183, 10, 21, 129,
        10, 23, 104, 10, 24, 251, 11, 0, 251, 11, 1, 127, 11, 5, 183, 11, 6,
        252, 11, 7, 183, 11, 8, 179, 11, 12, 251, 11, 16, 179, 11, 20, 183,
        11, 23, 115, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12, 3,
        251, 12, 4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251, 12,
        9, 251, 12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12, 14,
        251, 12, 15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19, 251,
        12, 20, 251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 251, 13,
        0, 251, 13, 1, 58, 13, 5, 56, 13, 8, 179, 13, 12, 251, 13, 13, 5, 13,
        19, 179, 13, 24, 251, 14, 0, 251, 14, 1, 104, 14, 5, 104, 14, 8, 179,
        14, 10, 101, 14, 12, 251, 14, 13, 104, 14, 19, 179, 14, 21, 101, 14,
        24, 251, 15, 0, 251, 15, 1, 148, 15, 4, 209, 15, 5, 128, 15, 8, 179,
        15, 12, 251, 15, 13, 150, 15, 16, 156, 15, 19, 179, 15, 24, 251, 16,
        0, 251, 16, 8, 179, 16, 9, 179, 16, 10, 179, 16, 11, 179, 16, 12, 251,
        16, 19, 179, 16, 20, 179, 16, 21, 179, 16, 22, 179, 16, 23, 179, 16,
        24, 251, 17, 0, 251, 17, 12, 251, 17, 24, 251, 18, 0, 251, 18, 7, 252,
        18, 8, 207, 18, 12, 180, 18, 21, 207, 18, 24, 251, 19, 0, 251, 19, 1,
        183, 19, 2, 183, 19, 3, 183, 19, 4, 183, 19, 12, 251, 19, 13, 183, 19,
        14, 183, 19, 15, 183, 19, 16, 183, 19, 17, 183, 19, 18, 252, 19, 24,
        251, 20, 0, 251, 20, 4, 183, 20, 12, 251, 20, 17, 183, 20, 24, 251,
        21, 0, 251, 21, 1, 28, 21, 4, 183, 21, 12, 251, 21, 17, 183, 21, 24,
        251, 22, 0, 251, 22, 1, 104, 22, 4, 183, 22, 12, 251, 22, 15, 104, 22,
        17, 183, 22, 24, 251, 23, 0, 251, 23, 1, 115, 23, 4, 183, 23, 9, 100,
        23, 10, 104, 23, 11, 115, 23, 12, 251, 23, 13, 56, 23, 14, 104, 23,
        15, 116, 23, 17, 183, 23, 24, 251, 24, 0, 251, 24, 1, 251, 24, 2, 251,
        24, 3, 251, 24, 4, 251, 24, 5, 251, 24, 6, 251, 24, 7, 251, 24, 8,
        251, 24, 9, 251, 24, 10, 251, 24, 11, 251, 24, 12, 251, 24, 13, 251,
        24, 14, 251, 24, 15, 251, 24, 16, 251, 24, 17, 251, 24, 18, 251, 24,
        19, 251, 24, 20, 251, 24, 21, 251, 24, 22, 251, 24, 23, 251, 24, 24,
        186]

    elif game_id == 6:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 1, 35, 1, 12, 229, 1, 22, 104,
        1, 23, 116, 1, 24, 251, 2, 0, 251, 2, 1, 104, 2, 12, 229, 2, 20, 229,
        2, 21, 100, 2, 22, 104, 2, 23, 115, 2, 24, 251, 3, 0, 251, 3, 1, 123,
        3, 12, 229, 3, 16, 204, 3, 20, 229, 3, 22, 104, 3, 23, 116, 3, 24,
        251, 4, 0, 251, 4, 12, 229, 4, 20, 229, 4, 21, 93, 4, 22, 104, 4, 23,
        115, 4, 24, 251, 5, 0, 251, 5, 12, 229, 5, 19, 229, 5, 22, 104, 5, 23,
        116, 5, 24, 251, 6, 0, 180, 6, 6, 156, 6, 12, 229, 6, 18, 229, 6, 21,
        229, 6, 22, 229, 6, 23, 229, 6, 24, 251, 7, 0, 251, 7, 12, 229, 7, 17,
        229, 7, 19, 210, 7, 21, 229, 7, 24, 251, 8, 0, 251, 8, 8, 210, 8, 9,
        210, 8, 10, 210, 8, 11, 210, 8, 12, 210, 8, 13, 210, 8, 14, 210, 8,
        15, 210, 8, 16, 210, 8, 21, 229, 8, 24, 251, 9, 0, 251, 9, 8, 210, 9,
        9, 78, 9, 11, 5, 9, 12, 229, 9, 13, 53, 9, 15, 93, 9, 16, 210, 9, 19,
        210, 9, 21, 229, 9, 24, 251, 10, 0, 251, 10, 8, 210, 10, 9, 104, 10,
        11, 104, 10, 12, 229, 10, 13, 104, 10, 15, 104, 10, 16, 210, 10, 19,
        210, 10, 21, 229, 10, 24, 251, 11, 0, 251, 11, 1, 244, 11, 8, 210, 11,
        9, 115, 11, 11, 114, 11, 12, 229, 11, 13, 149, 11, 15, 129, 11, 16,
        210, 11, 19, 210, 11, 21, 229, 11, 23, 244, 11, 24, 251, 12, 0, 186,
        12, 1, 251, 12, 2, 251, 12, 3, 251, 12, 4, 251, 12, 5, 251, 12, 6,
        251, 12, 7, 251, 12, 8, 210, 12, 9, 251, 12, 10, 251, 12, 11, 251, 12,
        12, 229, 12, 13, 251, 12, 14, 251, 12, 15, 251, 12, 16, 210, 12, 17,
        251, 12, 18, 251, 12, 19, 251, 12, 20, 251, 12, 21, 251, 12, 22, 251,
        12, 23, 251, 12, 24, 186, 13, 0, 251, 13, 1, 244, 13, 8, 210, 13, 9,
        59, 13, 11, 95, 13, 12, 229, 13, 13, 68, 13, 15, 78, 13, 16, 210, 13,
        20, 210, 13, 21, 210, 13, 22, 210, 13, 23, 244, 13, 24, 251, 14, 0,
        251, 14, 8, 210, 14, 9, 104, 14, 11, 104, 14, 12, 229, 14, 13, 104,
        14, 15, 104, 14, 16, 210, 14, 24, 251, 15, 0, 251, 15, 8, 210, 15, 9,
        115, 15, 11, 148, 15, 12, 229, 15, 13, 150, 15, 15, 128, 15, 16, 210,
        15, 24, 251, 16, 0, 251, 16, 8, 210, 16, 9, 210, 16, 10, 210, 16, 11,
        210, 16, 12, 210, 16, 13, 210, 16, 14, 210, 16, 15, 210, 16, 16, 210,
        16, 24, 251, 17, 0, 251, 17, 12, 229, 17, 24, 251, 18, 0, 251, 18, 6,
        246, 18, 12, 229, 18, 18, 219, 18, 24, 251, 19, 0, 251, 19, 12, 229,
        19, 24, 251, 20, 0, 251, 20, 12, 229, 20, 24, 251, 21, 0, 251, 21, 12,
        229, 21, 23, 92, 21, 24, 251, 22, 0, 251, 22, 12, 229, 22, 23, 104,
        22, 24, 251, 23, 0, 251, 23, 12, 229, 23, 23, 124, 23, 24, 251, 24, 0,
        251, 24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4, 251, 24, 5, 251, 24,
        6, 251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24, 10, 251, 24, 11, 251,
        24, 12, 251, 24, 13, 251, 24, 14, 251, 24, 15, 251, 24, 16, 251, 24,
        17, 251, 24, 18, 251, 24, 19, 251, 24, 20, 251, 24, 21, 251, 24, 22,
        251, 24, 23, 251, 24, 24, 251]


    elif game_id == 7:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 3, 175, 1, 12, 251, 1, 13, 100,
        1, 24, 251, 2, 0, 251, 2, 4, 73, 2, 6, 5, 2, 12, 251, 2, 13, 104, 2,
        19, 156, 2, 24, 251, 3, 0, 251, 3, 12, 251, 3, 13, 115, 3, 24, 251, 4,
        0, 251, 4, 2, 210, 4, 3, 210, 4, 4, 210, 4, 5, 210, 4, 6, 210, 4, 7,
        210, 4, 8, 210, 4, 9, 210, 4, 10, 210, 4, 12, 251, 4, 16, 244, 4, 17,
        244, 4, 18, 35, 4, 19, 244, 4, 20, 244, 4, 24, 251, 5, 0, 251, 5, 1,
        104, 5, 11, 104, 5, 12, 251, 5, 16, 244, 5, 17, 244, 5, 18, 210, 5,
        19, 244, 5, 20, 244, 5, 24, 251, 6, 0, 180, 6, 1, 149, 6, 5, 59, 6, 6,
        104, 6, 7, 124, 6, 11, 148, 6, 12, 251, 6, 16, 244, 6, 17, 210, 6, 18,
        104, 6, 19, 210, 6, 20, 244, 6, 24, 180, 7, 0, 251, 7, 1, 251, 7, 5,
        24, 7, 6, 104, 7, 7, 114, 7, 11, 251, 7, 12, 251, 7, 16, 244, 7, 17,
        244, 7, 18, 210, 7, 19, 244, 7, 20, 244, 7, 24, 251, 8, 0, 251, 8, 12,
        251, 8, 16, 244, 8, 17, 244, 8, 18, 123, 8, 19, 244, 8, 20, 244, 8,
        24, 251, 9, 0, 251, 9, 4, 210, 9, 5, 210, 9, 6, 210, 9, 12, 251, 9,
        24, 251, 10, 0, 251, 10, 4, 210, 10, 5, 186, 10, 6, 210, 10, 12, 251,
        10, 24, 251, 11, 0, 251, 11, 4, 210, 11, 5, 210, 11, 6, 210, 11, 12,
        251, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12, 3, 251, 12,
        4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251, 12, 9, 251,
        12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12, 14, 251, 12,
        15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19, 251, 12, 20,
        251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 251, 13, 0, 251,
        13, 10, 59, 13, 12, 251, 13, 13, 91, 13, 20, 31, 13, 21, 93, 13, 22,
        59, 13, 24, 251, 14, 0, 251, 14, 2, 224, 14, 9, 251, 14, 10, 104, 14,
        11, 251, 14, 12, 251, 14, 13, 104, 14, 20, 251, 14, 21, 104, 14, 22,
        104, 14, 23, 104, 14, 24, 251, 15, 0, 251, 15, 9, 251, 15, 10, 115,
        15, 11, 251, 15, 12, 251, 15, 13, 150, 15, 20, 251, 15, 21, 116, 15,
        22, 126, 15, 23, 116, 15, 24, 251, 16, 0, 251, 16, 6, 210, 16, 10,
        251, 16, 12, 251, 16, 16, 242, 16, 21, 251, 16, 22, 251, 16, 23, 251,
        16, 24, 251, 17, 0, 251, 17, 5, 210, 17, 6, 210, 17, 7, 210, 17, 12,
        251, 17, 24, 251, 18, 0, 180, 18, 4, 210, 18, 5, 92, 18, 6, 104, 18,
        7, 127, 18, 8, 210, 18, 12, 180, 18, 24, 251, 19, 0, 251, 19, 5, 210,
        19, 6, 210, 19, 7, 210, 19, 12, 251, 19, 24, 251, 20, 0, 251, 20, 6,
        210, 20, 12, 251, 20, 24, 251, 21, 0, 251, 21, 12, 251, 21, 23, 29,
        21, 24, 251, 22, 0, 251, 22, 10, 224, 22, 12, 251, 22, 23, 104, 22,
        24, 251, 23, 0, 251, 23, 12, 251, 23, 23, 115, 23, 24, 251, 24, 0,
        251, 24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4, 251, 24, 5, 251, 24,
        6, 251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24, 10, 251, 24, 11, 251,
        24, 12, 251, 24, 13, 251, 24, 14, 251, 24, 15, 251, 24, 16, 251, 24,
        17, 251, 24, 18, 251, 24, 19, 251, 24, 20, 251, 24, 21, 251, 24, 22,
        251, 24, 23, 251, 24, 24, 251]

    elif game_id == 8:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 12, 251, 1, 16, 100, 1, 17, 104,
        1, 18, 115, 1, 24, 251, 2, 0, 251, 2, 1, 6, 2, 12, 251, 2, 24, 251, 3,
        0, 251, 3, 1, 104, 3, 12, 251, 3, 24, 251, 4, 0, 251, 4, 1, 114, 4,
        12, 251, 4, 24, 251, 5, 0, 251, 5, 6, 157, 5, 12, 251, 5, 18, 215, 5,
        24, 251, 6, 0, 180, 6, 12, 251, 6, 24, 251, 7, 0, 251, 7, 12, 251, 7,
        13, 64, 7, 24, 251, 8, 0, 251, 8, 12, 251, 8, 13, 104, 8, 24, 251, 9,
        0, 251, 9, 12, 251, 9, 13, 149, 9, 24, 251, 10, 0, 251, 10, 12, 251,
        10, 22, 239, 10, 24, 251, 11, 0, 251, 11, 9, 29, 11, 10, 104, 11, 11,
        124, 11, 12, 251, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12,
        3, 251, 12, 4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251,
        12, 9, 251, 12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12,
        14, 251, 12, 15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19,
        251, 12, 20, 251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 251,
        13, 0, 251, 13, 1, 67, 13, 12, 251, 13, 24, 251, 14, 0, 251, 14, 1,
        104, 14, 11, 88, 14, 12, 251, 14, 24, 251, 15, 0, 251, 15, 1, 148, 15,
        11, 104, 15, 12, 251, 15, 24, 251, 16, 0, 251, 16, 11, 123, 16, 12,
        251, 16, 24, 251, 17, 0, 251, 17, 12, 251, 17, 24, 251, 18, 0, 180,
        18, 6, 218, 18, 12, 180, 18, 18, 170, 18, 24, 251, 19, 0, 251, 19, 12,
        251, 19, 24, 251, 20, 0, 251, 20, 12, 251, 20, 13, 19, 20, 24, 251,
        21, 0, 251, 21, 12, 251, 21, 13, 104, 21, 24, 251, 22, 0, 251, 22, 12,
        251, 22, 13, 150, 22, 24, 251, 23, 0, 251, 23, 12, 251, 23, 24, 251,
        24, 0, 251, 24, 1, 251, 24, 2, 251, 24, 3, 251, 24, 4, 251, 24, 5,
        251, 24, 6, 251, 24, 7, 251, 24, 8, 251, 24, 9, 251, 24, 10, 251, 24,
        11, 251, 24, 12, 251, 24, 13, 251, 24, 14, 251, 24, 15, 251, 24, 16,
        251, 24, 17, 251, 24, 18, 251, 24, 19, 251, 24, 20, 251, 24, 21, 251,
        24, 22, 251, 24, 23, 251, 24, 24, 251]

    elif game_id == 9:
        return \
        [25, 25, 0, 0, 251, 0, 1, 251, 0, 2, 251, 0, 3, 251, 0, 4, 251, 0, 5,
        251, 0, 6, 251, 0, 7, 251, 0, 8, 251, 0, 9, 251, 0, 10, 251, 0, 11,
        251, 0, 12, 251, 0, 13, 251, 0, 14, 251, 0, 15, 251, 0, 16, 251, 0,
        17, 251, 0, 18, 251, 0, 19, 251, 0, 20, 251, 0, 21, 251, 0, 22, 251,
        0, 23, 251, 0, 24, 251, 1, 0, 251, 1, 12, 251, 1, 24, 251, 2, 0, 251,
        2, 12, 251, 2, 18, 211, 2, 24, 251, 3, 0, 251, 3, 12, 251, 3, 18, 163,
        3, 24, 251, 4, 0, 251, 4, 12, 251, 4, 18, 216, 4, 24, 251, 5, 0, 251,
        5, 12, 251, 5, 18, 185, 5, 24, 251, 6, 0, 251, 6, 6, 186, 6, 12, 251,
        6, 18, 209, 6, 24, 251, 7, 0, 251, 7, 12, 251, 7, 18, 219, 7, 24, 251,
        8, 0, 251, 8, 12, 251, 8, 18, 175, 8, 24, 251, 9, 0, 251, 9, 12, 251,
        9, 18, 170, 9, 24, 251, 10, 0, 251, 10, 12, 251, 10, 24, 251, 11, 0,
        251, 11, 12, 251, 11, 24, 251, 12, 0, 251, 12, 1, 251, 12, 2, 251, 12,
        3, 251, 12, 4, 251, 12, 5, 251, 12, 6, 251, 12, 7, 251, 12, 8, 251,
        12, 9, 251, 12, 10, 251, 12, 11, 251, 12, 12, 251, 12, 13, 251, 12,
        14, 251, 12, 15, 251, 12, 16, 251, 12, 17, 251, 12, 18, 251, 12, 19,
        251, 12, 20, 251, 12, 21, 251, 12, 22, 251, 12, 23, 251, 12, 24, 251,
        13, 0, 251, 13, 12, 251, 13, 24, 251, 14, 0, 251, 14, 12, 251, 14, 24,
        251, 15, 0, 251, 15, 12, 251, 15, 24, 251, 16, 0, 251, 16, 12, 251,
        16, 24, 251, 17, 0, 251, 17, 12, 251, 17, 24, 251, 18, 0, 251, 18, 6,
        180, 18, 12, 251, 18, 18, 144, 18, 24, 251, 19, 0, 251, 19, 12, 251,
        19, 24, 251, 20, 0, 251, 20, 12, 251, 20, 24, 251, 21, 0, 251, 21, 12,
        251, 21, 24, 251, 22, 0, 251, 22, 12, 251, 22, 24, 251, 23, 0, 251,
        23, 12, 251, 23, 24, 251, 24, 0, 251, 24, 1, 251, 24, 2, 251, 24, 3,
        251, 24, 4, 251, 24, 5, 251, 24, 6, 251, 24, 7, 251, 24, 8, 251, 24,
        9, 251, 24, 10, 251, 24, 11, 251, 24, 12, 251, 24, 13, 251, 24, 14,
        251, 24, 15, 251, 24, 16, 251, 24, 17, 251, 24, 18, 251, 24, 19, 251,
        24, 20, 251, 24, 21, 251, 24, 22, 251, 24, 23, 251, 24, 24, 251]

    else:
        return [1, 1]

def default_bytes(game_id: int) -> bytes:
    return bytes(get_default_state(game_id))


try:
    import pyBaba
    d_direction = {
            'N' : pyBaba.Direction.UP,
            'E' : pyBaba.Direction.RIGHT,
            'S' : pyBaba.Direction.DOWN,
            'W' : pyBaba.Direction.LEFT,
            }

    d_player = {
            1 : pyBaba.ObjectType.YOU,
            2 : pyBaba.ObjectType.TWO,
            3 : pyBaba.ObjectType.THREE,
            4 : pyBaba.ObjectType.FOUR,
            }

    def get_is_winning(state: List[int]) -> bool:
        width = state[0]
        height = state[1]
        game = pyBaba.Game(width, height)
        assert len(state) % 3 == 2

        for i in range(2, len(state), 3):
            x = state[i]
            y = state[i+1]
            t = state[i+2]
            game.AddObject(x, y, pyBaba.ObjectType(t))
        # need to refresh now that we did this low level adding
        game.ParseRules()
        return game.GetPlayState() == pyBaba.PlayState.WON

    def modify_game_state(state : List[int], player_id: int, direction: str):
        width = state[0]
        height = state[1]
        game = pyBaba.Game(width, height)
        assert len(state) % 3 == 2

        triples = []
        for i in range(2, len(state), 3):
            x = state[i]
            y = state[i+1]
            t = state[i+2]
            game.AddObject(x, y, pyBaba.ObjectType(t))
            triples.append((x,y,t))
        # need to refresh now that we did this low level adding
        game.ParseRules()

        diff: List[Diff] = []

        # do the action
        log = game.MoveIconsWith(d_player[player_id], d_direction[direction])

        for entry in log:
            x = entry.GetX()
            y = entry.GetY()
            d = entry.GetDelta()
            t = entry.GetType().__hash__()
            if d is True:
                triples.append( (x,y,t) )
            else:
                triples.remove( (x,y,t) )
            diff.append( (x,y,d,t) )

        new_state = [width, height]
        for triple in triples:
            new_state.extend(triple)

        won = game.GetPlayState() == pyBaba.PlayState.WON
        return new_state, diff, won

    def undo_game_state(state : List[int], old_diff: List[Diff]):
        width = state[0]
        height = state[1]

        triples = []
        for i in range(2, len(state), 3):
            x = state[i]
            y = state[i+1]
            t = state[i+2]
            triples.append((x,y,t))

        # now reverse the diff
        applied_diff: List[Diff] = []
        for d in reversed(old_diff):
            x,y,delta,t = d
            if delta is False:
                triples.append( (x,y,t) )
            if delta is True:
                triples.remove( (x,y,t) )
            applied_diff.append( (x,y, not delta, t) )

        new_state = [width, height]
        for triple in triples:
            new_state.extend(triple)
        return new_state, applied_diff

except:
    def modify_game_state(state, player_id, direction):
        return state, [], False

    def get_is_winning(state: List[int]) -> bool:
        return False

    def undo_game_state(state : List[int], old_diff: List[Diff]):
        return state, []

class BabaFormField(forms.fields.CharField):
    def prepare_value(self, value):
        return ",".join(map(str,list(value)))
class BabaBinaryField(models.BinaryField):
    def to_python(self, value: Optional[str]) -> bytes:
        if value is None:
            return []
        elif isinstance(value, list):
            return value
        else:
            vals = value.split(',')
            res = []
            for v in vals:
                try:
                    res.append(int(v.strip()))
                except:
                    raise ValidationError("Must be comma-separated list of ints")
            return bytes(res)
    def formfield(self, **kwargs):
        defaults = {'form_class': BabaFormField}
        defaults.update(kwargs)
        return super().formfield(**defaults)

    def get_internal_type(self):
        return 'BinaryField'

class Puzzle617TeamData(models.Model):
    team = models.OneToOneField(Team, on_delete=models.CASCADE)
    # current game state
    gamestate1 = BabaBinaryField(default=default_bytes(1), max_length=5000,editable=True,verbose_name="Game State (Level 1)")
    gamestate2 = BabaBinaryField(default=default_bytes(2), max_length=5000,editable=True,verbose_name="Game State (Level 2)")
    gamestate3 = BabaBinaryField(default=default_bytes(3), max_length=5000,editable=True,verbose_name="Game State (Level 3)")
    gamestate4 = BabaBinaryField(default=default_bytes(4), max_length=5000,editable=True,verbose_name="Game State (Level 4)")
    gamestate5 = BabaBinaryField(default=default_bytes(5), max_length=5000,editable=True,verbose_name="Game State (Level 5)")
    gamestate6 = BabaBinaryField(default=default_bytes(6), max_length=5000,editable=True,verbose_name="Game State (Level 6)")
    gamestate7 = BabaBinaryField(default=default_bytes(7), max_length=5000,editable=True,verbose_name="Game State (Level 7)")
    gamestate8 = BabaBinaryField(default=default_bytes(8), max_length=5000,editable=True,verbose_name="Game State (Level 8)")
    gamestate9 = BabaBinaryField(default=default_bytes(9), max_length=5000,editable=True,verbose_name="Game State (Level 9)")
    diff1 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 1)")
    diff2 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 2)")
    diff3 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 3)")
    diff4 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 4)")
    diff5 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 5)")
    diff6 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 6)")
    diff7 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 7)")
    diff8 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 8)")
    diff9 = BabaBinaryField(default=b'',blank=True, max_length=5000,editable=False,verbose_name="Diff (Level 9)")

    max_level = models.IntegerField(default=1)
    player1s = models.IntegerField(default=0)
    player2s = models.IntegerField(default=0)
    player3s = models.IntegerField(default=0)
    player4s = models.IntegerField(default=0)
    def get_state(self, n: int) -> bytes:
        if n > self.max_level:
            raise Exception("Trying to jump ahead")
        if n == 1:
            return self.gamestate1
        elif n == 2:
            return self.gamestate2
        elif n == 3:
            return self.gamestate3
        elif n == 4:
            return self.gamestate4
        elif n == 5:
            return self.gamestate5
        elif n == 5:
            return self.gamestate5
        elif n == 6:
            return self.gamestate6
        elif n == 7:
            return self.gamestate7
        elif n == 8:
            return self.gamestate8
        elif n == 9:
            return self.gamestate9
        else:
            raise Exception("Invalid game state")
    def set_state(self, n: int, gamestate: bytes, diff: List[Diff]):
        if n > self.max_level:
            raise Exception("Trying to jump ahead")
        if n == 1:
            self.diff1 = diff
            self.gamestate1 = gamestate
        elif n == 2:
            self.diff2 = diff
            self.gamestate2 = gamestate
        elif n == 3:
            self.diff3 = diff
            self.gamestate3 = gamestate
        elif n == 4:
            self.diff4 = diff
            self.gamestate4 = gamestate
        elif n == 5:
            self.diff5 = diff
            self.gamestate5 = gamestate
        elif n == 6:
            self.diff6 = diff
            self.gamestate6 = gamestate
        elif n == 7:
            self.diff7 = diff
            self.gamestate7 = gamestate
        elif n == 8:
            self.diff8 = diff
            self.gamestate8 = gamestate
        elif n == 9:
            self.diff9 = diff
            self.gamestate9 = gamestate
        else:
            raise Exception("Invalid game state")
    def get_diff(self, n: int):
        if n > self.max_level:
            raise Exception("Trying to jump ahead")
        if n == 1:
            return self.diff1
        elif n == 2:
            return self.diff2
        elif n == 3:
            return self.diff3
        elif n == 4:
            return self.diff4
        elif n == 5:
            return self.diff5
        elif n == 5:
            return self.diff5
        elif n == 6:
            return self.diff6
        elif n == 7:
            return self.diff7
        elif n == 8:
            return self.diff8
        elif n == 9:
            return self.diff9
        else:
            raise Exception("Invalid game state")

    def __str__(self):
        return '%s' % (self.team)

class Puzzle617Consumer(TeamworkTimeConsumer):
    def setup(self):
        super(Puzzle617Consumer, self).setup(617)

    @transaction.atomic
    def apply_move(self, game_id: int, player_id: int, direction:str):
        # print("Moving:",game_id,player_id,direction)
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        position = data.get_state(game_id)

        new_state, diff, won = modify_game_state(deserialize(position), player_id, direction)
        if diff:
            data.set_state(game_id, serialize(new_state), serializeDiffs(diff))
        if won:
            if game_id == data.max_level:
                data.max_level += 1
        if diff or won:
            data.save()
        # print(diff)
        return diff, won, hash_state(new_state)

    @transaction.atomic
    def rewind_move(self, game_id: int, state):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        data.set_state(game_id, serialize(state), [])
        data.save()

    @transaction.atomic
    def undo_move(self, game_id: int):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        position = data.get_state(game_id)
        old_diff = data.get_diff(game_id)
        if not old_diff:
            return [], hash_state(position)
        new_state, diff = undo_game_state(deserialize(position), deserializeDiffs(old_diff))
        data.set_state(game_id, serialize(new_state), serializeDiffs(diff))
        data.save()
        return diff, hash_state(new_state)

    @transaction.atomic
    def get_state(self, game_id):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        return deserialize(data.get_state(game_id))

    @transaction.atomic
    def reset_board(self, game_id):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        data.set_state(game_id, get_default_state(game_id), [])
        data.save()
        return deserialize(data.get_state(game_id))

    @transaction.atomic
    def get_level(self):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        return data.max_level

    @transaction.atomic
    def decrement_counter(self):
        return
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        if self.player == 1:
            data.player1s -= 1
        elif self.player == 2:
            data.player2s -= 1
        elif self.player == 3:
            data.player3s -= 1
        elif self.player == 4:
            data.player4s -= 1
        data.save()

    @transaction.atomic
    def choose_player(self):
        data: Puzzle617TeamData = Puzzle617TeamData.objects.select_for_update().get_or_create(team=self.team)[0]
        min_count = min((data.player1s, data.player2s, data.player3s, data.player4s))
        if data.player1s == min_count:
            self.player = 1
            data.player1s += 1
        elif data.player2s == min_count:
            self.player = 2
            data.player2s += 1
        elif data.player3s == min_count:
            self.player = 3
            data.player3s += 1
        elif data.player4s == min_count:
            self.player = 4
            data.player4s += 1
        else:
            raise Exception("This is not consistent")
        data.save()


    def handle(self, msg):
        if msg['type'] == 'start':
            board = int(msg['board'])
            state = self.get_state(board)
            h = hash_state(state)
            self.respond({'state': state, 'board': board, 'type': 'fullstate',
                'won': get_is_winning(state), 'hash' : h})
        elif msg['type'] == 'move':
            board = int(msg['board'])
            direction = msg['direction']
            if direction not in 'NEWS':
                raise Exception("Invalid move direction")
            diff, won, h = self.apply_move(board, self.player, direction)
            if diff:
                response = {
                    "diff": diff,
                    "won": won,
                    'board': board,
                    'type': 'update',
                    'hash': h,
                }
                self.broadcast(response)
            if won:
                self.broadcast({'type': 'init', 'level': self.get_level()})
        elif msg['type'] == 'undo':
            board = int(msg['board'])
            diff, h = self.undo_move(board)
            if diff:
                response = {
                    "diff": diff,
                    "won": False,
                    'board': board,
                    'type': 'update',
                    'hash' : h,
                }
                self.broadcast(response)
        elif msg['type'] == 'rewind':
            board = int(msg['board'])
            state = msg['state']
            h = msg['hash']
            assert hash_state(state) == h, "bad hash"
            # TODO check hash
            self.rewind_move(board, state)
            self.broadcast({'type': 'fullstate', 'board': board, 'state' : state, 'hash' : h})
        elif msg['type'] == 'reset':
            board = int(msg['board'])
            initial_state = self.reset_board(board)
            h = hash_state(initial_state)
            self.broadcast({'state': initial_state, 'type': 'fullstate', 'board': board, 'hash' : h})

    def authed(self):
        self.choose_player()
        state = self.get_state(1)
        h = hash_state(state)
        self.respond({'type': 'init', 'level': self.get_level(), 'player': self.player})
        self.respond({'state': state, 'board': 1, 'type': 'fullstate', 'hash' : h})


    def disconnected(self):
        self.decrement_counter()
