var bastate = false;
var cbstate = false;

(function($) {
  function drags(dragElement, resizeElement, container) {

    // Initialize the dragging event on mousedown.
    dragElement.on('mousedown.ba-events touchstart.ba-events', function(e) {
      bastate = true;

      dragElement.addClass('ba-draggable');
      resizeElement.addClass('ba-resizable');

      // Check if it's a mouse or touch event and pass along the correct value
      var startX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;

      // Get the initial position
      var dragWidth = dragElement.outerWidth(),
          posX = dragElement.offset().left + dragWidth - startX,
          containerOffset = container.offset().left,
          containerWidth = container.outerWidth();

      // Set limits
      minLeft = containerOffset + 0;
      maxLeft = containerOffset + containerWidth - dragWidth - 0;

      // Calculate the dragging distance on mousemove.
      dragElement.parents().on("mousemove.ba-events touchmove.ba-events", function(e) {
        if (!bastate) {
          return;
        }

        // Check if it's a mouse or touch event and pass along the correct value
        var moveX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;

        leftValue = moveX + posX - dragWidth;

        // Prevent going off limits
        if ( leftValue < minLeft) {
          leftValue = minLeft;
        } else if (leftValue > maxLeft) {
          leftValue = maxLeft;
        }

        // Translate the handle's left value to masked divs width.
        widthValue = (leftValue + dragWidth/2 - containerOffset)*100/containerWidth;
        mywidthValue = (widthValue / 2);
        rightValue = 100 - widthValue;


        // Set the new values for the slider and the handle.
        $('.ba-draggable').css('left', widthValue+'%');
        $('.ba-resizable').css('width', mywidthValue+'%');
        $('.ba-resizable').css('left', mywidthValue+'%');
        $('.ba-resizable-former').css('width', rightValue+'%');
      // Bind mouseup events to stop dragging.
      }).on('mouseup.ba-events touchend.ba-events touchcancel.ba-events', function(){
        dragElement.removeClass('ba-draggable');
        resizeElement.removeClass('ba-resizable');
        // Unbind all events for performance
        $(this).off('.ba-events');
        bastate = false;
      });
      e.preventDefault();
    });
  }

  function crags(dragElement, resizeElement, container) {

    // Initialize the dragging event on mousedown.
    dragElement.on('mousedown.cb-events touchstart.cb-events', function(e) {
      cbstate = true;

      dragElement.addClass('cb-draggable');
      resizeElement.addClass('cb-resizable');

      // Check if it's a mouse or touch event and pass along the correct value
      var startX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;

      // Get the initial position
      var dragWidth = dragElement.outerWidth(),
          posX = dragElement.offset().left + dragWidth - startX,
          containerOffset = container.offset().left,
          containerWidth = container.outerWidth();

      // Set limits
      minLeft = containerOffset + 0;
      maxLeft = containerOffset + containerWidth - dragWidth - 0;

      // Calculate the dragging distance on mousemove.
      dragElement.parents().on("mousemove.cb-events touchmove.cb-events", function(e) {
        if (!cbstate) {
          return;
        }

        // Check if it's a mouse or touch event and pass along the correct value
        var moveX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;

        leftValue = moveX + posX - dragWidth;

        // Prevent going off limits
        if ( leftValue < minLeft) {
          leftValue = minLeft;
        } else if (leftValue > maxLeft) {
          leftValue = maxLeft;
        }

        // Translate the handle's left value to masked divs width.
        widthValue = (leftValue + dragWidth/2 - containerOffset)*100/containerWidth;
        mywidthValue = (widthValue / 2);
        rightValue = (100 - widthValue)/2;


        // Set the new values for the slider and the handle.
        $('.cb-draggable').css('left', widthValue+'%');
        $('.cb-resizable').css('width', rightValue+'%');
        $('.cb-resizable').css('left', widthValue+'%');
        $('.cb-resizable-former').css('width', widthValue+'%');
      // Bind mouseup events to stop dragging.
    }).on('mouseup.cb-events touchend.cb-events touchcancel.cb-events', function(){
        cbstate = false;
        dragElement.removeClass('cb-draggable');
        resizeElement.removeClass('cb-resizable');
        // Unbind all events for performance
        $(this).off('.cb-events');
      });
      e.preventDefault();
    });
  }

  // Define plugin
  $.fn.beforeAfter = function() {
    var cur = this;
    // Adjust the slider
    var width = cur.width()+'px';
    cur.find('.resize img').css('width', width);
    // Bind dragging events
    drags(cur.find('.handle'), cur.find('.resize'), cur);

    // Update sliders on resize.
    // Because we all do this: i.imgur.com/YkbaV.gif
    $(window).resize(function(){
      var width = cur.width()+'px';
      cur.find('.resize img').css('width', width);
    });
  }

  $.fn.ceforeBfter = function() {
    var cur = this;
    // Adjust the slider
    var width = cur.width()+'px';
    cur.find('.resize img').css('width', width);
    // Bind dragging events
    crags(cur.find('.handle'), cur.find('.resize'), cur);

    // Update sliders on resize.
    // Because we all do this: i.imgur.com/YkbaV.gif
    $(window).resize(function(){
      var width = cur.width()+'px';
      cur.find('.resize img').css('width', width);
    });
  }


}(jQuery));
